// Code generated by moshi-kotlin-codegen. Do not edit.
package com.positron.migrationtimes.models

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonDataException
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import java.lang.NullPointerException
import kotlin.Int
import kotlin.String

class TipsJsonAdapter(moshi: Moshi) : JsonAdapter<Tips>() {
    private val options: JsonReader.Options =
            JsonReader.Options.of("id", "title", "thumbnail", "salary", "address")

    private val intAdapter: JsonAdapter<Int> =
            moshi.adapter<Int>(Int::class.java, kotlin.collections.emptySet(), "id")

    private val stringAdapter: JsonAdapter<String> =
            moshi.adapter<String>(String::class.java, kotlin.collections.emptySet(), "title")

    override fun toString(): String = "GeneratedJsonAdapter(Tips)"

    override fun fromJson(reader: JsonReader): Tips {
        var id: Int? = null
        var title: String? = null
        var thumbnail: Int? = null
        var salary: String? = null
        var address: String? = null
        reader.beginObject()
        while (reader.hasNext()) {
            when (reader.selectName(options)) {
                0 -> id = intAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'id' was null at ${reader.path}")
                1 -> title = stringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'title' was null at ${reader.path}")
                2 -> thumbnail = intAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'thumbnail' was null at ${reader.path}")
                3 -> salary = stringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'salary' was null at ${reader.path}")
                4 -> address = stringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'address' was null at ${reader.path}")
                -1 -> {
                    // Unknown name, skip it.
                    reader.skipName()
                    reader.skipValue()
                }
            }
        }
        reader.endObject()
        var result = Tips(
                id = id ?: throw JsonDataException("Required property 'id' missing at ${reader.path}"),
                title = title ?: throw JsonDataException("Required property 'title' missing at ${reader.path}"),
                thumbnail = thumbnail ?: throw JsonDataException("Required property 'thumbnail' missing at ${reader.path}"),
                salary = salary ?: throw JsonDataException("Required property 'salary' missing at ${reader.path}"),
                address = address ?: throw JsonDataException("Required property 'address' missing at ${reader.path}"))
        return result
    }

    override fun toJson(writer: JsonWriter, value: Tips?) {
        if (value == null) {
            throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
        }
        writer.beginObject()
        writer.name("id")
        intAdapter.toJson(writer, value.id)
        writer.name("title")
        stringAdapter.toJson(writer, value.title)
        writer.name("thumbnail")
        intAdapter.toJson(writer, value.thumbnail)
        writer.name("salary")
        stringAdapter.toJson(writer, value.salary)
        writer.name("address")
        stringAdapter.toJson(writer, value.address)
        writer.endObject()
    }
}
