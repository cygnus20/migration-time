// Code generated by moshi-kotlin-codegen. Do not edit.
package com.positron.migrationtimes.models

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonDataException
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import java.lang.NullPointerException
import kotlin.Boolean
import kotlin.String

class ReplyJsonAdapter(moshi: Moshi) : JsonAdapter<Reply>() {
    private val options: JsonReader.Options = JsonReader.Options.of("embeddable", "href")

    private val booleanAdapter: JsonAdapter<Boolean> =
            moshi.adapter<Boolean>(Boolean::class.java, kotlin.collections.emptySet(), "embeddable")

    private val nullableStringAdapter: JsonAdapter<String?> =
            moshi.adapter<String?>(String::class.java, kotlin.collections.emptySet(), "href")

    override fun toString(): String = "GeneratedJsonAdapter(Reply)"

    override fun fromJson(reader: JsonReader): Reply {
        var embeddable: Boolean? = null
        var href: String? = null
        reader.beginObject()
        while (reader.hasNext()) {
            when (reader.selectName(options)) {
                0 -> embeddable = booleanAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'embeddable' was null at ${reader.path}")
                1 -> href = nullableStringAdapter.fromJson(reader)
                -1 -> {
                    // Unknown name, skip it.
                    reader.skipName()
                    reader.skipValue()
                }
            }
        }
        reader.endObject()
        var result = Reply(
                embeddable = embeddable ?: throw JsonDataException("Required property 'embeddable' missing at ${reader.path}"),
                href = href)
        return result
    }

    override fun toJson(writer: JsonWriter, value: Reply?) {
        if (value == null) {
            throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
        }
        writer.beginObject()
        writer.name("embeddable")
        booleanAdapter.toJson(writer, value.embeddable)
        writer.name("href")
        nullableStringAdapter.toJson(writer, value.href)
        writer.endObject()
    }
}
